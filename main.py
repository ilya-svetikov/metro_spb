# -*- coding: utf-8 -*-

from jinja2 import Environment, FileSystemLoader
import os
import webapp2
import cgi

def closed(first, second):
    if (first == u'Выборгская') or (first == u'Василеостровская') or (second == u'Выборгская') or (second == u'Василеостровская'):
        return True

		
jinja_env = Environment(loader=FileSystemLoader(os.path.dirname(__file__)))
jinja_env.globals['closed'] = closed


graph = {0: {17: 2, 22: 3},
         1: {56: 3, 53: 3},
         2: {45: 2, 11: 6},
         3: {58: 2, 30: 3},
         4: {27: 3, 7: 3},
         5: {46: 4, 10: 4},
         6: {42: 2, 51: 2, 13: 2},
         7: {33: 3, 4: 3},
         8: {23: 3, 43: 3},
         9: {38: 2, 31: 4},
         10: {31: 2, 26: 3, 5: 4},
         11: {2: 6, 12: 3},
         12: {11: 3},
         13: {55: 4, 24: 2, 6: 2},
         14: {25: 3, 40: 5},
         15: {20: 3, 28: 4},
         16: {51: 2, 33: 3, 53: 4},
         17: {0: 2, 30: 4},
         18: {57: 3},
         19: {57: 3, 65: 4},
         20: {15: 3},
         21: {32: 3, 48: 3},
         22: {0: 3, 49: 2},
         23: {44: 3, 43: 5, 8: 3},
         24: {41: 2, 13: 2},
         25: {47: 3, 14: 3},
         26: {42: 2, 10: 3, 40: 3},
         27: {4: 3},
         28: {36: 3, 15: 4},
         29: {62: 2, 66: 2},
         30: {3: 3, 17: 4},
         31: {9: 4, 10: 2, 54: 2},
         32: {21: 3, 41: 3},
         33: {7: 3, 16: 3},
         34: {52: 4, 47: 3},
         35: {50: 2, 60: 3},
         36: {66: 2, 28: 3},
         37: {50: 3},
         38: {63: 4, 9: 2},
         39: {63: 3, 60: 3},
         40: {41: 2, 26: 3, 14: 5},
         41: {40: 2, 32: 3, 24: 2},
         42: {26: 2, 64: 2, 6: 2},
         43: {64: 3, 23: 5, 8: 3},
         44: {23: 3, 45: 3},
         45: {2: 2, 44: 3},
         46: {5: 4},
         47: {25: 3, 34: 3},
         48: {21: 3, 61: 2},
         49: {22: 2},
         50: {37: 3, 35: 2},
         51: {16: 2, 6: 2, 58: 2},
         52: {34: 4},
         53: {1: 3, 55: 3, 54: 3, 16: 4},
         54: {55: 3, 53: 3, 31: 2, 59: 3},
         55: {53: 3, 54: 3, 13: 4},
         56: {1: 3, 65: 2},
         57: {18: 3, 19: 3},
         58: {3: 2, 59: 1, 51: 2},
         59: {58: 1, 62: 2, 54: 3},
         60: {35: 3, 39: 3},
         61: {48: 2},
         62: {29: 2, 59: 2},
         63: {39: 3, 38: 4},
         64: {43: 3, 42: 2},
         65: {19: 4, 56: 2},
         66: {29: 2, 36: 2}}

stations_reverse = {u'Автово': 0,
                    u'Адмиралтейская': 1,
                    u'Академическая': 2,
                    u'Балтийская': 3,
                    u'Бухарестская': 4,
                    u'Василеостровская': 5,
                    u'Владимирская': 6,
                    u'Волковская': 7,
                    u'Выборгская': 8,
                    u'Горьковская': 9,
                    u'Гостиный двор': 10,
                    u'Гражданский проспект': 11,
                    u'Девяткино': 12,
                    u'Достоевская': 13,
                    u'Елизаровская': 14,
                    u'Звёздная': 15,
                    u'Звенигородская': 16,
                    u'Кировский завод': 17,
                    u'Комендантский проспект': 18,
                    u'Крестовский остров': 19,
                    u'Купчино': 20,
                    u'Ладожская': 21,
                    u'Ленинский проспект': 22,
                    u'Лесная': 23,
                    u'Лиговский проспект': 24,
                    u'Ломоносовская': 25,
                    u'Маяковская': 26,
                    u'Международная': 27,
                    u'Московская': 28,
                    u'Московские ворота': 29,
                    u'Нарвская': 30,
                    u'Невский проспект': 31,
                    u'Новочеркасская': 32,
                    u'Обводный канал': 33,
                    u'Обухово': 34,
                    u'Озерки': 35,
                    u'Парк Победы': 36,
                    u'Парнас': 37,
                    u'Петроградская': 38,
                    u'Пионерская': 39,
                    u'Площадь Александра Невского 1': 40,
                    u'Площадь Александра Невского 2': 41,
                    u'Площадь Восстания': 42,
                    u'Площадь Ленина': 43,
                    u'Площадь Мужества': 44,
                    u'Политехническая': 45,
                    u'Приморская': 46,
                    u'Пролетарская': 47,
                    u'Проспект Большевиков': 48,
                    u'Проспект Ветеранов': 49,
                    u'Проспект Просвещения': 50,
                    u'Пушкинская': 51,
                    u'Рыбацкое': 52,
                    u'Садовая': 53,
                    u'Сенная площадь': 54,
                    u'Спасская': 55,
                    u'Спортивная': 56,
                    u'Старая Деревня': 57,
                    u'Технологический институт 1': 58,
                    u'Технологический институт 2': 59,
                    u'Удельная': 60,
                    u'Улица Дыбенко': 61,
                    u'Фрунзенская': 62,
                    u'Чёрная речка': 63,
                    u'Чернышевская': 64,
                    u'Чкаловская': 65,
                    u'Электросила': 66}

stations = {0: u'Автово',
            1: u'Адмиралтейская',
            2: u'Академическая',
            3: u'Балтийская',
            4: u'Бухарестская',
            5: u'Василеостровская',
            6: u'Владимирская',
            7: u'Волковская',
            8: u'Выборгская',
            9: u'Горьковская',
            10: u'Гостиный двор',
            11: u'Гражданский проспект',
            12: u'Девяткино',
            13: u'Достоевская',
            14: u'Елизаровская',
            15: u'Звёздная',
            16: u'Звенигородская',
            17: u'Кировский завод',
            18: u'Комендантский проспект',
            19: u'Крестовский остров',
            20: u'Купчино',
            21: u'Ладожская',
            22: u'Ленинский проспект',
            23: u'Лесная',
            24: u'Лиговский проспект',
            25: u'Ломоносовская',
            26: u'Маяковская',
            27: u'Международная',
            28: u'Московская',
            29: u'Московские ворота',
            30: u'Нарвская',
            31: u'Невский проспект',
            32: u'Новочеркасская',
            33: u'Обводный канал',
            34: u'Обухово',
            35: u'Озерки',
            36: u'Парк Победы',
            37: u'Парнас',
            38: u'Петроградская',
            39: u'Пионерская',
            40: u'Площадь Александра Невского 1',
            41: u'Площадь Александра Невского 2',
            42: u'Площадь Восстания',
            43: u'Площадь Ленина',
            44: u'Площадь Мужества',
            45: u'Политехническая',
            46: u'Приморская',
            47: u'Пролетарская',
            48: u'Проспект Большевиков',
            49: u'Проспект Ветеранов',
            50: u'Проспект Просвещения',
            51: u'Пушкинская',
            52: u'Рыбацкое',
            53: u'Садовая',
            54: u'Сенная площадь',
            55: u'Спасская',
            56: u'Спортивная',
            57: u'Старая Деревня',
            58: u'Технологический институт 1',
            59: u'Технологический институт 2',
            60: u'Удельная',
            61: u'Улица Дыбенко',
            62: u'Фрунзенская',
            63: u'Чёрная речка',
            64: u'Чернышевская',
            65: u'Чкаловская',
            66: u'Электросила'}


def find_min(dist, used):
    finded = False
    min_index = 0
    for i in range(len(dist)):
        if not used[i] and (not finded or dist[i] < dist[min_index]):
            min_index = i
            finded = True
    return (finded, min_index)


def relax(graph, vertex, dist, prev):
    for neighbour in graph[vertex].keys():
        if dist[neighbour] > dist[vertex] + graph[vertex][neighbour]:
            dist[neighbour] = dist[vertex] + graph[vertex][neighbour]
            prev[neighbour] = vertex


def Dijkstra(graph, first, end):
    INF = 1000000000
    dist = [INF] * len(graph)
    dist[first] = 0
    used = [False] * len(graph)
    prev = [-1] * len(graph)
    while True:
        finded, min_index = find_min(dist, used)
        if not finded:
            break
        used[min_index] = True
        relax(graph, min_index, dist, prev)
    path = [end]
    t = end
    while prev[t] != -1:
        t = prev[t]
        path.append(t)
    path.reverse()
    named_path = [stations[station] for station in path]
    return (dist[end], named_path)


class MainPage(webapp2.RequestHandler):
    def get(self):
        template = jinja_env.get_template('first_page_spb.html')
        self.response.write(template.render())


class ResultPage(webapp2.RequestHandler):
    def post(self):
        first = self.request.get("first").strip().capitalize()
        second = self.request.get("second").strip().capitalize()
        try:
            Result, way = Dijkstra(graph, stations_reverse[first], stations_reverse[second])
            template_values = {
			    'first' : first,
				'second' : second,
                'Result': Result,
                'way': way,
                'check': False,
                }
        except:
            template_values = {
                'check': True
            }
        template = jinja_env.get_template('first_page_spb.html')
        self.response.write(template.render(template_values))



application = webapp2.WSGIApplication([
    ('/', MainPage),
    ('/main.py', ResultPage),
], debug=True)


def main():
    application.run()


if __name__ == "__main__":
    main()
